//
//  TapppableEmitterSceneMaker.swift
//  VidExies
//
//  Created by Andy Dent on 20/11/2024.
//  Emitter creation logic generated by https://www.purrticles.com app & tweaked slightly by hand

import SpriteKit

// using a class so can have a ref instance shared between SpriteKitContainerWithGen and its nested Coordinator class
// makes a resizeable scene with emitters that can be tapped, eg: to stop recording
class TapppableEmitterSceneMaker: ResizeableSceneMaker {
    let id = UUID()  // for debugging only to detect different versions being created
    
    var leftFire: SKEmitterNode? = nil
    var rightFire: SKEmitterNode? = nil
    var confetti: SKEmitterNode? = nil
    var minSpray: SKEmitterNode? = nil
    var onTouch: ()->Void
    
    init(onTouch: @escaping () -> Void) {
        self.onTouch = onTouch
    }
    

    func makeScene(sizedTo: CGSize) -> SKScene {
        guard leftFire == nil else {
            fatalError("makeScene called again after already made emitters")
        }
        print("Making scene sized (\(sizedTo.width), \(sizedTo.height))")
        let ret = TappableScene(size: sizedTo, onTouch: onTouch)
        ret.scaleMode = .resizeFill
        leftFire = TapppableEmitterSceneMaker.createFireEmitter(relativeTo: sizedTo, onLeft: true)
        ret.addChild(leftFire!)
        rightFire = TapppableEmitterSceneMaker.createFireEmitter(relativeTo: sizedTo, onLeft: false)
        ret.addChild(rightFire!)
        confetti = TapppableEmitterSceneMaker.createConfettiEmitter(relativeTo: sizedTo)
        ret.addChild(confetti!)
        minSpray = TapppableEmitterSceneMaker.createMinSprayEmitter(relativeTo: sizedTo)
        ret.addChild(minSpray!)
        return ret
    }
    
    // take oldsize in case adjustments should scale relative to that or want to compare
    // note that the position setting here is basically just a copy of that in create methods below
    // but that might not always be the case so we don't abstract a single position setter
    func viewResized(from oldSize: CGSize, to newSize: CGSize) {
        guard leftFire != nil else {
            print("viewResized called before made emitters")
            return
        }
        //leftFire?.position not reassigned as it's two constant values, relative to bottom-left
        rightFire?.position = CGPoint(x: newSize.width - 56, y: 37)
        confetti?.position = CGPoint(x: newSize.width / 2, y: newSize.height - 8)
        minSpray?.position = CGPoint(x: newSize.width/2, y: newSize.height/2)
        
        // for this demo, unlike ResizingRemit, as can be rendering on vastly bigger also resize particlePositionRange
        let widthScale = newSize.width / 402.0
        let heightScale = newSize.height / 874.0
        leftFire?.particlePositionRange = CGVector(dx: 56 * widthScale, dy:  5 * heightScale)
        rightFire?.particlePositionRange = CGVector(dx: 56 * widthScale, dy:  50 * heightScale)
        // minSpray centred
        confetti?.particlePositionRange = CGVector(dx: 400 * widthScale, dy:  2 * heightScale)
        
        let textureScale = min(widthScale, heightScale)
        if textureScale > 1.5 {  // only bother if much bigger movies
            leftFire?.particleScale = textureScale
            rightFire?.particleScale = textureScale
            // no-texture particles we adjust size as is simple shader filling rect
            confetti?.particleSize = CGSize(width: 8 * widthScale, height: 16 * heightScale)
            minSpray?.particleSize = CGSize(width: 8 * widthScale, height: 8 * heightScale)
        }  else {
            leftFire?.particleScale = 1.0
            rightFire?.particleScale = 1.0
            confetti?.particleSize = CGSize(width: 8, height: 16)
            minSpray?.particleSize = CGSize(width: 8, height: 8)
        }
    }
    
    func forgetScene() {
        leftFire = nil
        rightFire = nil
        confetti = nil
        minSpray = nil
    }
    
    
    // allows for two variations in corners so have notably different stuff can see effect of scaling for non-horizintally centered
    private static func createFireEmitter(relativeTo: CGSize, onLeft: Bool) -> SKEmitterNode {
        let em = SKEmitterNode()
        em.particleTexture = SKTexture(imageNamed: "spark")
        em.position = CGPoint(x: onLeft ? 56 : relativeTo.width - 56, y: 37)  // centered would be relativeTo.width / 2
        em.particleBirthRate = 455
        em.particleLifetime = onLeft ? 10 : 40
        em.emissionAngle = 1.5708 // radians (90º)
        em.emissionAngleRange = 0.3491 // radians (20º)
        em.particleSpeed = 100
        em.particleSpeedRange = 50
        em.particleAlpha = 0.8000
        em.particleAlphaRange = 0.2000
        em.particleAlphaSpeed = onLeft ? -0.4500 : -0.1500
        em.particleScale = 0.5000
        em.particleScaleRange = 0.4000
        em.particleScaleSpeed = onLeft ? -0.5000 : -0.2000
        em.particleBlendMode = SKBlendMode.add
        em.particleColor = SKColor(red: 0.3059, green: 0.1294, blue: 0.0235, alpha: 1.0000)    // #ff4e2106
        em.particleColorBlendFactor = 1
        em.particlePositionRange = CGVector(dx: 56, dy: onLeft ? 5 : 50)
        return em
    }
    
    
    private static func createConfettiEmitter(relativeTo: CGSize) -> SKEmitterNode {
        let em = SKEmitterNode()
        em.position = CGPoint(x: relativeTo.width / 2, y: relativeTo.height - 8)
        em.particleBirthRate = 150
        em.particleLifetime = 8
        em.emissionAngle = 4.7124 // radians (270º)
        em.particleSpeed = 80
        em.particleSpeedRange = 150
        em.yAcceleration = -150
        em.particleColor = SKColor(red: 1.0000, green: 1.0000, blue: 1.0000, alpha: 1.0000)  // #ffffffff
        em.particleAlpha = 0.6000
        em.particlePositionRange = CGVector(dx: 400, dy: 2)
        em.particleSize = CGSize(width: 8, height: 16)
        em.particleColorRedRange = 2
        em.particleColorGreenRange = 2
        em.particleColorBlueRange = 2
        em.particleRotationRange = 2.0944 // radians (120º)
        return em
    }
    
    
    private static func createMinSprayEmitter(relativeTo: CGSize) -> SKEmitterNode {
        let em = SKEmitterNode()
        em.particleSize = CGSize(width: 8, height: 8) // default size if no texture
        em.position = CGPoint(x: relativeTo.width/2, y: relativeTo.height/2)
        em.particleBirthRate = 10
        em.particleLifetime = 2
        em.emissionAngleRange = 6.2832 // radians (360º)
        em.particleSpeed = 80
        em.particleColor = SKColor(red: 0.9961, green: 0.8510, blue: 0.4667, alpha: 1.0000)    // #fffed977
        return em
    }
    
}
