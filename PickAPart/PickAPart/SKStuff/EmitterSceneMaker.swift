//
//  SceneMaker.swift
//  PickAPart
//
//  Created by Andrew Dent on 20/11/2024.
//  Emitter creation logic generated by https://www.purrticles.com app & tweaked slightly by hand
// Copied from ResizingRemit and customised so we can have many indexed variants
// that have just a aingle emitter, to support a picker with many cells

import SpriteKit

// using a class so can have a ref instance shared
class EmitterSceneMaker: ResizeableSceneMaker {
    fileprivate var emitter: SKEmitterNode? = nil
    let whichEm: Int
    let emVariation: Int
    let title: String
    
    init(emIndex: Int) {
        (whichEm, emVariation) = emIndex.quotientAndRemainder(dividingBy: 4)
        title = switch whichEm {
        case 0:
            "Fire left \(emVariation)"
        case 1:
            "Fire right \(emVariation)"
        case 2:
            "Confetti \(emVariation)"
        case 3:
            "Sprayer \(emVariation)"
        default:
            ""
        }
    }
    
    func makeScene(sizedTo: CGSize) -> SKScene {
        guard emitter == nil else {
            fatalError("makeScene called again after already made emitters")
        }
        print("Making scene sized (\(sizedTo.width), \(sizedTo.height))")
        let ret = SKScene(size: sizedTo)
        ret.scaleMode = .resizeFill
        let em = switch whichEm {
        case 0:
            createFireEmitter(relativeTo: sizedTo, onLeft: true)
        case 1:
            createFireEmitter(relativeTo: sizedTo, onLeft: false)
        case 2:
            createConfettiEmitter(relativeTo: sizedTo)
        case 3:
            createMinSprayEmitter(relativeTo: sizedTo)
        default:
            fatalError("Don't understand whichEm \(whichEm)")
        }
        ret.addChild(em)
        emitter = em
        return ret
    }
    
    // take oldsize in case adjustments should scale relative to that or want to compare
    // note that the position setting here is basically just a copy of that in create methods below
    // but that might not always be the case so we don't abstract a single position setter
    func viewResized(from oldSize: CGSize, to newSize: CGSize) {
        guard let em = emitter else {
            print("viewResized called before made emitters")
            return
        }
        //leftFire .position not reassigned as it's two constant values, relative to bottom-left
        switch whichEm {
        case 1:
            em.position = CGPoint(x: newSize.width - 56, y: 37)
        case 2:
            em.position = CGPoint(x: newSize.width / 2, y: newSize.height - 8)
        case 3:
            em.position = CGPoint(x: newSize.width/2, y: newSize.height/2)
        default:
            fatalError("Don't understand whichEm \(whichEm)")
        }

    }
    
    func forgetScene() {
        emitter = nil
    }
    
    //MARK:
    // allows for two variations in corners so have notably different stuff can see effect of scaling for non-horizintally centered
    private func createFireEmitter(relativeTo: CGSize, onLeft: Bool) -> SKEmitterNode {
        let em = SKEmitterNode()
        let varF = CGFloat(emVariation) + 1.0
        em.particleTexture = SKTexture(imageNamed: "spark")
        em.position = CGPoint(x: onLeft ? 56 : relativeTo.width - 56, y: 37)  // centered would be relativeTo.width / 2
        em.particleBirthRate = 100.0 * varF
        em.particleLifetime = (onLeft ? 10 : 40) * varF
        em.emissionAngle = 1.5708 // radians (90º)
        em.emissionAngleRange = 0.3491 // radians (20º)
        em.particleSpeed = 100
        em.particleSpeedRange = 25 * varF
        em.particleAlpha = 0.8000
        em.particleAlphaRange = 0.2000
        em.particleAlphaSpeed = onLeft ? -0.4500 : -0.1500
        em.particleScale = 0.5000
        em.particleScaleRange = 0.4000
        em.particleScaleSpeed = onLeft ? -0.5000 : -0.2000
        em.particleBlendMode = SKBlendMode.add
        em.particleColor = SKColor(red: 0.3059, green: 0.1294, blue: 0.0235, alpha: 1.0000)    // #ff4e2106
        em.particleColorBlendFactor = 1
        em.particlePositionRange = CGVector(dx: 56, dy: onLeft ? 5 : 50)
        return em
    }
    
    
    private func createConfettiEmitter(relativeTo: CGSize) -> SKEmitterNode {
        let em = SKEmitterNode()
        let varF = CGFloat(emVariation) + 1.0
        em.position = CGPoint(x: relativeTo.width / 2, y: relativeTo.height - 8)
        em.particleBirthRate = 50 * varF
        em.particleLifetime = 40 / varF
        em.emissionAngle = 4.7124 // radians (270º)
        em.particleSpeed = 80
        em.particleSpeedRange = 150
        em.yAcceleration = -150
        em.particleColor = SKColor(red: 1.0000, green: 1.0000, blue: 1.0000, alpha: 1.0000)  // #ffffffff
        em.particleAlpha = 0.6000
        em.particlePositionRange = CGVector(dx: 400, dy: 2)
        em.particleSize = CGSize(width: 8, height: 16)
        em.particleColorRedRange = 2
        em.particleColorGreenRange = 2
        em.particleColorBlueRange = 2
        em.particleRotationRange = 2.0944 // radians (120º)
        return em
    }
    
    
    private func createMinSprayEmitter(relativeTo: CGSize) -> SKEmitterNode {
        let em = SKEmitterNode()
        let varF = CGFloat(emVariation) + 1.0
        em.particleSize = CGSize(width: 8, height: 8) // default size if no texture
        em.position = CGPoint(x: relativeTo.width/2, y: relativeTo.height/2)
        em.particleBirthRate = 10 * varF
        em.particleLifetime = 8 / varF
        em.emissionAngleRange = 6.2832 // radians (360º)
        em.particleSpeed = 80
        em.particleColor = SKColor(red: 0.9961, green: 0.8510, blue: 0.4667, alpha: 1.0000)    // #fffed977
        return em
    }
    
}
